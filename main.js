!function(){"use strict";var t=JSON.parse('{"hW":[{"name":"Afghanistan","latitude":33.93911,"longitude":67.709953,"random_position":6,"optimized_position":0},{"name":"Antarctica","latitude":-75.250973,"longitude":-0.071389,"random_position":2,"optimized_position":3},{"name":"Australia","latitude":-25.274398,"longitude":133.775136,"random_position":7,"optimized_position":2},{"name":"Bolivia","latitude":-16.290154,"longitude":-63.588653,"random_position":0,"optimized_position":4},{"name":"Central African Republic","latitude":6.611111,"longitude":20.939444,"random_position":3,"optimized_position":8},{"name":"France","latitude":46.227638,"longitude":2.213749,"random_position":8,"optimized_position":7},{"name":"Greenland","latitude":71.706936,"longitude":-42.604303,"random_position":5,"optimized_position":6},{"name":"Russia","latitude":61.52401,"longitude":105.318756,"random_position":1,"optimized_position":1},{"name":"United States","latitude":37.09024,"longitude":-95.712891,"random_position":4,"optimized_position":5}]}');const e=L.map("map").setView([51.505,-.09],2),i=[];L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(e);const o=L.icon({iconUrl:"a29e914295e0187548c7.png",iconSize:[35,48],iconAnchor:[10,20],popupAnchor:[5,-20]});t.hW.forEach((t=>{L.marker([t.latitude,t.longitude],{icon:o}).addTo(e).bindPopup(t.name).openPopup(),i.push([t.latitude,t.longitude,t.optimized_position])}));const n=i.sort(((t,e)=>t[2]-e[2])),s=(L.polyline(n).addTo(e),document.forms.form),r=document.querySelector(".popup-confirm"),a=[];new class{constructor(t,e){this._options=t,this._form=e}_hasInvalidInput(t){return t.some((t=>!t.validity.valid))}_showInputError(t){const e=this._form.querySelector(`.${t.id}-error`);t.classList.add(this._options.inputErrorClass),e.classList.add(this._options.errorClass),e.textContent=t.validationMessage}_hideInputError(t){const e=this._form.querySelector(`.${t.id}-error`);t.classList.remove(this._options.inputErrorClass),e.classList.remove(this._options.errorClass),e.textContent=""}_checkInputValidity(t){t.validity.valid?this._hideInputError(t,this._options):this._showInputError(t,this._options)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._options.inputSelector)),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t)}))}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners(this._form,this._options)}}({formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},s).enableValidation();const p=new class{constructor(t){this._popup=t,this._button=this._popup.querySelector(".popup__btn")}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close=()=>{this._popup.classList.remove("popup_opened"),this.removeEventListeners()};setEventListeners(){this._button.addEventListener("click",this.close),document.addEventListener("mousedown",this._handleOverlayClick),document.addEventListener("keydown",this._handleEscKeydown)}removeEventListeners(){this._closeButton.removeEventListener("click",this.close),document.removeEventListener("mousedown",this._handleOverlayClick),document.removeEventListener("keydown",this._handleEscKeydown)}_handleOverlayClick=t=>{t.target.classList.contains("popup_opened")&&this.close()};_handleEscKeydown=t=>{"Escape"===t.key&&this.close()}}(r),d=new class{constructor(t,e){this._form=t,this._handleSubmit=e,this._formInputs=this._form.querySelectorAll(".form__input")}_getInputValues(){const t={};return this._formInputs.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._formInputs.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){this._form.addEventListener("submit",this._handleSubmitForm)}_handleSubmitForm=t=>{this._handleSubmit(this._getInputValues()),t.preventDefault()};reset(){this._form.reset()}}(s,(()=>{p.open(),a.push(d._getInputValues()),d.reset()}));d.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,